@model GoSharpProject.Models.entities.SiteTemplate
@{
    ViewBag.Title = "Edit Item";
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@ViewBag.Title | @Html.DisplayFor(model => model.Name)</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Dashboard", "Home")">Home</a>
            </li>
            <li>
                <a href="@Url.Action("ProductsGrid", "Ecommerce")">E-commerce</a>
            </li>
            <li class="active">
                <strong>@ViewBag.Title</strong>
            </li>
        </ol>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="row">
    <div class="col-lg-12">
    <div class="tabs-container">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#tab-1"> Product info</a></li>
    </ul>
    <div class="tab-content">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div id="tab-1" class="tab-pane active">
            <div class="panel-body">
                <fieldset class="form-horizontal">
                    @Html.HiddenFor(model => model.Id)
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-sm-2"})
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger", placeholder = "Item name"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new {@class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Price, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.Price, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Category, "Category", htmlAttributes: new {@class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @Html.EnumDropDownListFor(model => model.Category, htmlAttributes: new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.Category, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new {@class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.ShortDescription, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.ShortDescription, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new {@class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ItemPictureUrl, htmlAttributes: new {@class = "control-label col-sm-2" })
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.ItemPictureUrl, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.ItemPictureUrl, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-10">
                            <div class="fileinput fileinput-new" data-provides="fileinput">
                                <span class="btn btn-default btn-file">
                                    <span class="fileinput-new">Select file</span>
                                    <span class="fileinput-exists">Change</span>
                                    <input id="File" name="File" type="file">
                                </span>
                                <span class="fileinput-filename"></span>
                                <a href="#" class="close fileinput-exists" data-dismiss="fileinput" style="float: none">×</a>
                            </div>
                            @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="hr-line-dashed"></div>
                <div class="form-group">
                    <div class="col-sm-4 col-sm-offset-2">
                        <a href="@Url.Action("Details", new {id = Model.Id})" class="btn btn-white" type="submit">Cancel</a>
                        <input type="submit" value="Save changes" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>
    </div>
    </div>
}

@section Styles {
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/codeEditorStyles")
}

@section Scripts {
    @Scripts.Render("~/plugins/dropZone")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/codeEditor")
}